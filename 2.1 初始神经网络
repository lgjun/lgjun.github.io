1. 初识神经网络
  MNIST数据集是机器学习领域的一个经典数据集，其历史几乎和这个领域一样长。这个数据集包含 60 000 张训练图像和 10 000 张测试图像，由美国国家标准与技术研究院（NIST）在20世纪80年代收集得到。
  解决 MNIST 问题可看作深度学习的 “HELLO WORLD”。
  
  关于类和标签的说明：在机器学习中，分类问题中的某个类别叫做类（class）。数据点叫做样本（sample），某个样本对应的类叫做标签（label）。
  
  神经网络的核心组件是层（layer）,它是一种数据处理模块，可以看出数据过滤器。进去一些数据，出来的数据变得更加有用. 具体来说, 层从输入数据中提取表示, 这种表示有助于解决手头问题. 大多数深度学习都是将
  简单的层链接起来，从而实现渐进式的数据蒸馏（data distillation）.
  
  代码清单2-1 加载Keras中的MNIST数据集
In [1]: from keras.datasets import mnist

In [2]: (train_images,train_labels),(test_images,test_labels) = mnist.load_data()
# 训练数据
In [4]: train_images.shape
Out[4]: (60000, 28, 28)

In [5]: len(train_labels)
Out[5]: 60000

In [6]: train_labels
Out[6]: array([5, 0, 4, ..., 5, 6, 8], dtype=uint8)
# 测试数据
In [7]: test_images.shape
Out[7]: (10000, 28, 28)

In [8]: len(test_labels)
Out[8]: 10000

In [9]: test_labels
Out[9]: array([7, 2, 1, ..., 4, 5, 6], dtype=uint8)

# 网络架构
In [11]: from keras import models

In [12]: from keras import layers

In [13]: network = models.Sequential()
2022-02-10 03:59:00.540832: I tensorflow/core/platform/cpu_feature_guard.cc:142] This TensorFlow binary is optimized with oneAPI Deep Neu                                   ral Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2022-02-10 03:59:02.932871: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1510] Created device /job:localhost/replica:0/task:0/devic                                   e:GPU:0 with 22318 MB memory:  -> device: 0, name: GeForce RTX 3090, pci bus id: 0000:18:00.0, compute capability: 8.6
2022-02-10 03:59:02.942871: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1510] Created device /job:localhost/replica:0/task:0/devic                                   e:GPU:1 with 22318 MB memory:  -> device: 1, name: GeForce RTX 3090, pci bus id: 0000:3b:00.0, compute capability: 8.6
2022-02-10 03:59:02.944283: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1510] Created device /job:localhost/replica:0/task:0/devic                                   e:GPU:2 with 22318 MB memory:  -> device: 2, name: GeForce RTX 3090, pci bus id: 0000:86:00.0, compute capability: 8.6
2022-02-10 03:59:02.945705: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1510] Created device /job:localhost/replica:0/task:0/devic                                   e:GPU:3 with 22318 MB memory:  -> device: 3, name: GeForce RTX 3090, pci bus id: 0000:af:00.0, compute capability: 8.6

In [14]: network.add(layers.Dense(512, activation='relu', input_shape=(28 * 28,)))

In [15]: network.add(layers.Dense(10, activation='softmax'))
# 包含两个Dense层，它们是密集链接（也叫全连接）的神经层. 第二层是一个10路 softmax 层，它将返回一个由10个概率值（总和为1）组成的数组。每个概率值表示当前数字图像属于10个数字类别中某一个的概率.
#编译步骤, 损失函数（loss）\优化器（optimizer）\在训练和测试过程中需要监控的指标（metric）
In [16]: network.compile(optimizer='rmsprop', loss='categorical_crossentropy',metrics=['accuracy'])

#准备图像
In [17]: train_images = train_images.reshape((60000, 28 * 28))

In [18]: train_images = train_images.astype('float32') / 255

In [19]: test_images = test_images.reshape((10000, 28 * 28))

In [20]: test_images = test_images.astype('float32') / 255

#准备标签
In [21]: from keras.utils import to_categorical
---------------------------------------------------------------------------
ImportError                               Traceback (most recent call last)
<ipython-input-21-812bfb11e6e7> in <module>
----> 1 from keras.utils import to_categorical

ImportError: cannot import name 'to_categorical'

In [22]: from tensorflow.keras.utils import to_categorical

In [23]: train_labels = to_categorical(train_labels)

In [24]: test_labels = to_categorical(test_labels)

#拟合模型（fit）
In [25]: network.fit(train_images, train_labels, epochs=5, batch_size=128)
2022-02-10 04:09:20.483605: I tensorflow/compiler/mlir/mlir_graph_optimization_pass.cc:185] None of the MLIR Optimization Passes are enabled (registered 2)
Epoch 1/5
2022-02-10 04:09:22.057455: I tensorflow/stream_executor/cuda/cuda_blas.cc:1760] TensorFloat-32 will be used for the matrix multiplication. This will only be logged once.
469/469 [==============================] - 2s 1ms/step - loss: 0.2568 - accuracy: 0.9258
Epoch 2/5
469/469 [==============================] - 1s 2ms/step - loss: 0.1029 - accuracy: 0.9688
Epoch 3/5
469/469 [==============================] - 1s 2ms/step - loss: 0.0677 - accuracy: 0.9796
Epoch 4/5
469/469 [==============================] - 1s 2ms/step - loss: 0.0493 - accuracy: 0.9853
Epoch 5/5
469/469 [==============================] - 1s 2ms/step - loss: 0.0376 - accuracy: 0.9886
Out[25]: <keras.callbacks.History at 0x147646dd2908>

#检测模型在测试集上的性能
In [26]: test_loss, test_acc = network.evaluate(test_images, test_labels)
313/313 [==============================] - 0s 1ms/step - loss: 0.0700 - accuracy: 0.9792

In [27]: print('test_acc:', test_acc)
test_acc: 0.979200005531311

上面例子就是如何构建和训练一个神经网络。

本文中的一切来自于Python 深度学习（Deep learning with Python）,是自己学习时的记录，如有侵权，请联系删除.
